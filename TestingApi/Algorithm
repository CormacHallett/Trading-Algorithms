import alpaca_trade_api as tradeapi
from alpaca_trade_api.rest import REST, TimeFrame
import pandas as pd
import numpy as np
import time
from datetime import datetime
import matplotlib.pyplot as plt


# Alpaca API credentials
API_KEY = ''
API_SECRET = ''
BASE_URL = ''  # Use the paper trading URL

# Initialize Alpaca API
api = tradeapi.REST(API_KEY, API_SECRET, BASE_URL, api_version='v2')

symbol = "AAPL"
start_date = "2023-01-01"
end_date = "2023-12-31"
short_window = 5
long_window = 20

# === Get historical bars ===
bars = api.get_bars(
    symbol,
    tradeapi.TimeFrame.Day,
    start=start_date,
    end=end_date
).df

# === Filter only the requested symbol (some versions return multiple symbols)
df = bars[bars['symbol'] == symbol] if 'symbol' in bars.columns else bars.copy()

# === Focus on closing prices
df = df[['close']].copy()

# === Moving Average Strategy
df["Short_MA"] = df["close"].rolling(window=short_window).mean()
df["Long_MA"] = df["close"].rolling(window=long_window).mean()
df["Position"] = 0
df.loc[df["Short_MA"] > df["Long_MA"], "Position"] = 1
df.loc[df["Short_MA"] < df["Long_MA"], "Position"] = -1

# === Drop rows with NaN values (from rolling)
df.dropna(inplace=True)

# === Output results
print("Signals (Buy = 1, Sell = -1):")
print(df.tail(20))


plt.figure(figsize=(14, 7))
plt.plot(df.index, df['close'], label='Price', color='black', linewidth=1)
plt.plot(df.index, df['Short_MA'], label=f'Short MA ({short_window})', color='blue', linestyle='--')
plt.plot(df.index, df['Long_MA'], label=f'Long MA ({long_window})', color='red', linestyle='--')

# Plot buy signals (when Position changes from -1 to 1)
buy_signals = df[(df['Position'] == 1) & (df['Position'].shift(1) != 1)]
sell_signals = df[(df['Position'] == -1) & (df['Position'].shift(1) != -1)]

plt.scatter(buy_signals.index, buy_signals['close'], marker='^', color='green', label='Buy Signal', s=100, zorder=5)
plt.scatter(sell_signals.index, sell_signals['close'], marker='v', color='red', label='Sell Signal', s=100, zorder=5)

plt.title(f"Trading Strategy on {symbol}")
plt.xlabel("Date")
plt.ylabel("Price")
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.show()
